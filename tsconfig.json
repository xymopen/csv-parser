{
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig to read more about this file */

    /* Projects */
    /* Save .tsbuildinfo files to allow for incremental compilation of projects. */
    // "incremental": true,
    /* Enable constraints that allow a TypeScript project to be used with project references. */
    // "composite": true,
    /* Specify the path to .tsbuildinfo incremental compilation file. */
    // "tsBuildInfoFile": "./.tsbuildinfo",
    /* Disable preferring source files instead of declaration files when referencing composite projects. */
    // "disableSourceOfProjectReferenceRedirect": true,
    /* Opt a project out of multi-project reference checking when editing. */
    // "disableSolutionSearching": true,
    /* Reduce the number of projects loaded automatically by TypeScript. */
    // "disableReferencedProjectLoad": true,

    /* Language and Environment */
    /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */
    "target": "es2016",
    /* Specify a set of bundled library declaration files that describe the target runtime environment. */
    // "lib": [],
    /* Specify what JSX code is generated. */
    // "jsx": "preserve",
    /* Enable experimental support for legacy experimental decorators. */
    // "experimentalDecorators": true,
    /* Emit design-type metadata for decorated declarations in source files. */
    // "emitDecoratorMetadata": true,
    /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'. */
    // "jsxFactory": "",
    /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */
    // "jsxFragmentFactory": "",
    /* Specify module specifier used to import the JSX factory functions when using 'jsx: react-jsx*'. */
    // "jsxImportSource": "",
    /* Specify the object invoked for 'createElement'. This only applies when targeting 'react' JSX emit. */
    // "reactNamespace": "",
    /* Disable including any library files, including the default lib.d.ts. */
    // "noLib": true,
    /* Emit ECMAScript-standard-compliant class fields. */
    // "useDefineForClassFields": true,
    /* Control what method is used to detect module-format JS files. */
    // "moduleDetection": "auto",

    /* Modules */
    /* Specify what module code is generated. */
    "module": "commonjs",
    /* Specify the root folder within your source files. */
    // "rootDir": "./",
    /* Specify how TypeScript looks up a file from a given module specifier. */
    // "moduleResolution": "node10",
    /* Specify the base directory to resolve non-relative module names. */
    // "baseUrl": "./",
    /* Specify a set of entries that re-map imports to additional lookup locations. */
    // "paths": {},
    /* Allow multiple folders to be treated as one when resolving modules. */
    // "rootDirs": [],
    /* Specify multiple folders that act like './node_modules/@types'. */
    // "typeRoots": [],
    /* Specify type package names to be included without being referenced in a source file. */
    "types": ["node"],
    /* Allow accessing UMD globals from modules. */
    // "allowUmdGlobalAccess": true,
    /* List of file name suffixes to search when resolving a module. */
    // "moduleSuffixes": [],
    /* Allow imports to include TypeScript file extensions. Requires '--moduleResolution bundler' and either '--noEmit' or '--emitDeclarationOnly' to be set. */
    // "allowImportingTsExtensions": true,
    /* Use the package.json 'exports' field when resolving package imports. */
    // "resolvePackageJsonExports": true,
    /* Use the package.json 'imports' field when resolving imports. */
    // "resolvePackageJsonImports": true,
    /* Conditions to set in addition to the resolver-specific defaults when resolving imports. */
    // "customConditions": [],
    /* Enable importing .json files. */
    // "resolveJsonModule": true,
    /* Enable importing files with any extension, provided a declaration file is present. */
    // "allowArbitraryExtensions": true,
    /* Disallow 'import's, 'require's or '<reference>'s from expanding the number of files TypeScript should add to a project. */
    // "noResolve": true,

    /* JavaScript Support */
    /* Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. */
    "allowJs": true,
    /* Enable error reporting in type-checked JavaScript files. */
    "checkJs": true,
    /* Specify the maximum folder depth used for checking JavaScript files from 'node_modules'. Only applicable with 'allowJs'. */
    // "maxNodeModuleJsDepth": 1,

    /* Emit */
    /* Generate .d.ts files from TypeScript and JavaScript files in your project. */
    // "declaration": true,
    /* Create sourcemaps for d.ts files. */
    // "declarationMap": true,
    /* Only output d.ts files and not JavaScript files. */
    // "emitDeclarationOnly": true,
    /* Create source map files for emitted JavaScript files. */
    // "sourceMap": true,
    /* Include sourcemap files inside the emitted JavaScript. */
    // "inlineSourceMap": true,
    /* Specify a file that bundles all outputs into one JavaScript file. If 'declaration' is true, also designates a file that bundles all .d.ts output. */
    // "outFile": "./",
    /* Specify an output folder for all emitted files. */
    // "outDir": "./",
    /* Disable emitting comments. */
    // "removeComments": true,
    /* Disable emitting files from a compilation. */
    "noEmit": true,
    /* Allow importing helper functions from tslib once per project, instead of including them per-file. */
    // "importHelpers": true,
    /* Specify emit/checking behavior for imports that are only used for types. */
    // "importsNotUsedAsValues": "remove",
    /* Emit more compliant, but verbose and less performant JavaScript for iteration. */
    // "downlevelIteration": true,
    /* Specify the root path for debuggers to find the reference source code. */
    // "sourceRoot": "",
    /* Specify the location where debugger should locate map files instead of generated locations. */
    // "mapRoot": "",
    /* Include source code in the sourcemaps inside the emitted JavaScript. */
    // "inlineSources": true,
    /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */
    // "emitBOM": true,
    /* Set the newline character for emitting files. */
    // "newLine": "crlf",
    /* Disable emitting declarations that have '@internal' in their JSDoc comments. */
    // "stripInternal": true,
    /* Disable generating custom helper functions like '__extends' in compiled output. */
    // "noEmitHelpers": true,
    /* Disable emitting files if any type checking errors are reported. */
    // "noEmitOnError": true,
    /* Disable erasing 'const enum' declarations in generated code. */
    // "preserveConstEnums": true,
    /* Specify the output directory for generated declaration files. */
    // "declarationDir": "./",
    /* Preserve unused imported values in the JavaScript output that would otherwise be removed. */
    // "preserveValueImports": true,

    /* Interop Constraints */
    /* Ensure that each file can be safely transpiled without relying on other imports. */
    // "isolatedModules": true,
    /* Do not transform or elide any imports or exports not marked as type-only, ensuring they are written in the output file's format based on the 'module' setting. */
    // "verbatimModuleSyntax": true,
    /* Allow 'import x from y' when a module doesn't have a default export. */
    "allowSyntheticDefaultImports": true,
    /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */
    "esModuleInterop": true,
    /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */
    // "preserveSymlinks": true,
    /* Ensure that casing is correct in imports. */
    "forceConsistentCasingInFileNames": true,

    /* Type Checking */
    /* Enable all strict type-checking options. */
    "strict": true,
    /* Enable error reporting for expressions and declarations with an implied 'any' type. */
    // "noImplicitAny": true,
    /* When type checking, take into account 'null' and 'undefined'. */
    // "strictNullChecks": true,
    /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */
    // "strictFunctionTypes": true,
    /* Check that the arguments for 'bind', 'call', and 'apply' methods match the original function. */
    // "strictBindCallApply": true,
    /* Check for class properties that are declared but not set in the constructor. */
    // "strictPropertyInitialization": true,
    /* Enable error reporting when 'this' is given the type 'any'. */
    // "noImplicitThis": true,
    /* Default catch clause variables as 'unknown' instead of 'any'. */
    // "useUnknownInCatchVariables": true,
    /* Ensure 'use strict' is always emitted. */
    // "alwaysStrict": true,
    /* Enable error reporting when local variables aren't read. */
    // "noUnusedLocals": true,
    /* Raise an error when a function parameter isn't read. */
    // "noUnusedParameters": true,
    /* Interpret optional property types as written, rather than adding 'undefined'. */
    // "exactOptionalPropertyTypes": true,
    /* Enable error reporting for codepaths that do not explicitly return in a function. */
    // "noImplicitReturns": true,
    /* Enable error reporting for fallthrough cases in switch statements. */
    // "noFallthroughCasesInSwitch": true,
    /* Add 'undefined' to a type when accessed using an index. */
    // "noUncheckedIndexedAccess": true,
    /* Ensure overriding members in derived classes are marked with an override modifier. */
    // "noImplicitOverride": true,
    /* Enforces using indexed accessors for keys declared using an indexed type. */
    // "noPropertyAccessFromIndexSignature": true,
    /* Disable error reporting for unused labels. */
    // "allowUnusedLabels": true,
    /* Disable error reporting for unreachable code. */
    // "allowUnreachableCode": true,

    /* Completeness */
    /* Skip type checking .d.ts files that are included with TypeScript. */
    // "skipDefaultLibCheck": true,
    /* Skip type checking all .d.ts files. */
    "skipLibCheck": true
  },
  "ts-node": {
    /** Behave as if invoked within this working directory.  Roughly equivalent to `cd $dir && ts-node ...` */
    // "cwd": "./",
    /** Emit output files into `.ts-node` directory. */
    // "emit": false,
    /** Scope compiler to files within `scopeDir`. */
    // "scope": false,
    // "scopeDir": "./",
    /** Use pretty diagnostic formatter. */
    // "pretty": false,
    /** Use TypeScript's faster `transpileModule`. */
    "transpileOnly": true,
    /** Use TypeScript's compiler host API instead of the language service API. */
    "compilerHost": true,
    /** Logs TypeScript errors to stderr instead of throwing exceptions. */
    // "logError": false,
    /**
     * Load "files" and "include" from `tsconfig.json` on startup.
     *
     * Default is to override `tsconfig.json` "files" and "include" to only include the entrypoint script.
     */
    "files": true,
    /** Specify a custom TypeScript compiler. */
    // "compiler": "typescript",
    /** Specify a custom transpiler for use with transpileOnly */
    // "transpiler": "",
    /**
     * Transpile with swc instead of the TypeScript compiler, and skip typechecking.
     *
     * Equivalent to setting both `transpileOnly: true` and `transpiler: 'ts-node/transpilers/swc'`
     *
     * For complete instructions: https://typestrong.org/ts-node/docs/transpilers
     */
    // "swc": false,
    /**
     * Paths which should not be compiled.
     *
     * Each string in the array is converted to a regular expression via `new RegExp()` and tested against source paths prior to compilation.
     *
     * Source paths are normalized to posix-style separators, relative to the directory containing `tsconfig.json` or to cwd if no `tsconfig.json` is loaded.
     *
     * Default is to ignore all node_modules subdirectories.
     */
    // "ignore": ["(?:^|/)node_modules/"],
    /**
     * Path to TypeScript config file or directory containing a `tsconfig.json`.
     * Similar to the `tsc --project` flag: https://www.typescriptlang.org/docs/handbook/compiler-options.html
     */
    // "project": "",
    /** Search for TypeScript config file (`tsconfig.json`) in this or parent directories. */
    // "projectSearchDir": "",
    /** Skip project config resolution and loading. */
    // "skipProject": false,
    /** Skip ignore check, so that compilation will be attempted for all files with matching extensions. */
    // "skipIgnore": false,
    /** Ignore TypeScript warnings by diagnostic code. */
    // "ignoreDiagnostics": [],
    /**
     * Allows the usage of top level await in REPL.
     *
     * Uses node's implementation which accomplishes this with an AST syntax transformation.
     *
     * Enabled by default when tsconfig target is es2018 or above. Set to false to disable.
     *
     * **Note**: setting to `true` when tsconfig target is too low will throw an Error.  Leave as `undefined`
     * to get default, automatic behavior.
     */
    // "experimentalReplAwait": false,
    /**
     * Override certain paths to be compiled and executed as CommonJS or ECMAScript modules.
     * When overridden, the tsconfig "module" and package.json "type" fields are overridden, and
     * the file extension is ignored.
     * This is useful if you cannot use .mts, .cts, .mjs, or .cjs file extensions;
     * it achieves the same effect.
     *
     * Each key is a glob pattern following the same rules as tsconfig's "include" array.
     * When multiple patterns match the same file, the last pattern takes precedence.
     *
     * `cjs` overrides matches files to compile and execute as CommonJS.
     * `esm` overrides matches files to compile and execute as native ECMAScript modules.
     * `package` overrides either of the above to default behavior, which obeys package.json "type" and
     * tsconfig.json "module" options.
     */
    // "moduleTypes": {},
    /**
     * Enable native ESM support.
     *
     * For details, see https://typestrong.org/ts-node/docs/imports#native-ecmascript-modules
     */
    // "esm": false,
    /**
     * Re-order file extensions so that TypeScript imports are preferred.
     *
     * For example, when both `index.js` and `index.ts` exist, enabling this option causes `require('./index')` to resolve to `index.ts` instead of `index.js`
     */
    // "preferTsExts": false,
    /**
     * Like node's `--experimental-specifier-resolution`, , but can also be set in your `tsconfig.json` for convenience.
     *
     * For details, see https://nodejs.org/dist/latest-v18.x/docs/api/esm.html#customizing-esm-specifier-resolution-algorithm
     */
    // "experimentalSpecifierResolution": "node",
    /**
     * Allow using voluntary `.ts` file extension in import specifiers.
     *
     * Typically, in ESM projects, import specifiers must have an emit extension, `.js`, `.cjs`, or `.mjs`,
     * and we automatically map to the corresponding `.ts`, `.cts`, or `.mts` source file.  This is the
     * recommended approach.
     *
     * However, if you really want to use `.ts` in import specifiers, and are aware that this may
     * break tooling, you can enable this flag.
     */
    // "experimentalTsImportSpecifiers": false
  },
}
